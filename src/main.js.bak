import "./style.css";
import * as THREE from "three";
import { TWEEN } from "@tweenjs/tween.js";


setupCounter(document.querySelector('#counter'))

// DOM Elements
const app = document.querySelector('#app')

// Routes
const routes = {
  '/': homePage,
  '/topics': topicsPage,
  '/games': gamesPage,
  '/game': gamePage,
}

// Route handler
function handleRoute() {
  const path = window.location.hash.replace('#', '') || '/'
  const route = Object.keys(routes).find(route => path.startsWith(route)) || '/'
  
  // Clear the app container
  app.innerHTML = ''
  
  // Call the appropriate route handler
  routes[route](path)
}

// Initialize the app
function init() {
  // Listen for route changes
  window.addEventListener('hashchange', handleRoute)
  
  // Initial route handling
  handleRoute()
}

// Homepage
function homePage() {
  app.innerHTML = `
    <header>
      <div class="container">
        <h1 class="logo">MathOrGame</h1>
        <p class="tagline">Learn Math. Play Games.</p>
      </div>
    </header>
    
    <nav>
      <a href="#">Home</a>
      <a href="#/topics">Topics</a>
      <a href="#/about">About</a>
    </nav>
    
    <main class="container">
      <div style="text-align: center; padding: 60px 0;">
        <h2>Welcome to MathOrGame!</h2>
        <p style="max-width: 600px; margin: 20px auto;">
          An interactive 3D math learning experience for grades 1-8.
          Solve problems, play games, and have fun while learning math!
        </p>
        <a href="#/topics" class="btn btn-primary">Start Learning</a>
      </div>
      
      <div class="game-container">
        <div id="three-container"></div>
      </div>
    </main>
    
    <footer>
      <div class="container">
        <p>&copy; 2023 MathOrGame | <a href="https://ko-fi.com" target="_blank" style="color: white;">Support Us</a></p>
      </div>
    </footer>
  `
  
  // Initialize 3D animation for the homepage
  initHomeAnimation()
}

// Topics page
function topicsPage() {
  app.innerHTML = `
    <header>
      <div class="container">
        <h1 class="logo">MathOrGame</h1>
        <p class="tagline">Learn Math. Play Games.</p>
      </div>
    </header>
    
    <nav>
      <a href="#">Home</a>
      <a href="#/topics">Topics</a>
      <a href="#/about">About</a>
    </nav>
    
    <main class="container">
      <h2 style="margin: 30px 0 20px; text-align: center;">Choose a Topic</h2>
      
      <div class="grid">
        <div class="card">
          <div class="card-header">
            <h3>Arithmetic</h3>
          </div>
          <div class="card-body">
            <p>Addition, subtraction, multiplication, and division games</p>
          </div>
          <div class="card-footer">
            <a href="#/games?topic=arithmetic" class="btn">View Games</a>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <h3>Geometry</h3>
          </div>
          <div class="card-body">
            <p>Shapes, angles, and spatial reasoning games</p>
          </div>
          <div class="card-footer">
            <a href="#/games?topic=geometry" class="btn">View Games</a>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <h3>Data & Measurement</h3>
          </div>
          <div class="card-body">
            <p>Volume, area, and data interpretation games</p>
          </div>
          <div class="card-footer">
            <a href="#/games?topic=measurement" class="btn">View Games</a>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <h3>Logic & Algebra</h3>
          </div>
          <div class="card-body">
            <p>Equations, patterns, and logical reasoning games</p>
          </div>
          <div class="card-footer">
            <a href="#/games?topic=algebra" class="btn">View Games</a>
          </div>
        </div>
      </div>
    </main>
    
    <footer>
      <div class="container">
        <p>&copy; 2023 MathOrGame | <a href="https://ko-fi.com" target="_blank" style="color: white;">Support Us</a></p>
      </div>
    </footer>
  `
}

// Games page
function gamesPage(path) {
  const params = new URLSearchParams(path.split('?')[1] || '')
  const topic = params.get('topic') || 'arithmetic'
  
  let topicTitle = 'Arithmetic'
  let games = []
  
  switch(topic) {
    case 'arithmetic':
      topicTitle = 'Arithmetic'
      games = [
        { id: 'dungeon-escape', name: 'Dungeon Escape', description: 'Solve addition and subtraction equations to escape the dungeon', unlocked: true },
        { id: 'space-shooter', name: 'Space Shooter', description: 'Practice multiplication by shooting the correct answers', unlocked: false },
        { id: 'number-bouncer', name: 'Number Bouncer', description: 'Sort even and odd numbers by bouncing them to the right side', unlocked: false }
      ]
      break
    case 'geometry':
      topicTitle = 'Geometry'
      games = [
        { id: 'shape-builder', name: 'Shape Builder', description: 'Build shapes and match the outlines to learn geometry', unlocked: true },
        { id: 'angle-hunter', name: 'Angle Hunter', description: 'Find the correct angles in 3D environments', unlocked: false }
      ]
      break
    case 'measurement':
      topicTitle = 'Data & Measurement'
      games = [
        { id: 'volume-quest', name: 'Volume Quest', description: 'Calculate the volume of 3D objects to progress', unlocked: true }
      ]
      break
    case 'algebra':
      topicTitle = 'Logic & Algebra'
      games = [
        { id: 'pattern-puzzle', name: 'Pattern Puzzle', description: 'Complete the pattern by finding the missing piece', unlocked: true }
      ]
      break
  }
  
  app.innerHTML = `
    <header>
      <div class="container">
        <h1 class="logo">MathOrGame</h1>
        <p class="tagline">Learn Math. Play Games.</p>
      </div>
    </header>
    
    <nav>
      <a href="#">Home</a>
      <a href="#/topics">Topics</a>
      <a href="#/about">About</a>
    </nav>
    
    <main class="container">
      <h2 style="margin: 30px 0 20px; text-align: center;">Games in ${topicTitle}</h2>
      
      <div class="grid">
        ${games.map(game => `
          <div class="card">
            <div class="card-header">
              <h3>${game.name} ${!game.unlocked ? 'ðŸ”’' : ''}</h3>
            </div>
            <div class="card-body">
              <p>${game.description}</p>
            </div>
            <div class="card-footer">
              <a href="${game.unlocked ? `#/game?id=${game.id}` : '#'}" 
                 class="btn ${!game.unlocked ? 'btn-disabled' : ''}" 
                 ${!game.unlocked ? 'disabled' : ''}>
                Play Game
              </a>
            </div>
          </div>
        `).join('')}
      </div>
      
      <div style="text-align: center; margin: 30px 0;">
        <a href="#/topics" class="btn">Back to Topics</a>
      </div>
    </main>
    
    <footer>
      <div class="container">
        <p>&copy; 2023 MathOrGame | <a href="https://ko-fi.com" target="_blank" style="color: white;">Support Us</a></p>
      </div>
    </footer>
  `
}

// Game page
function gamePage(path) {
  const params = new URLSearchParams(path.split('?')[1] || '')
  const gameId = params.get('id') || 'dungeon-escape'
  
  let gameTitle = 'Dungeon Escape'
  let gameDescription = 'Solve equations to open doors and escape the dungeon!'
  
  switch(gameId) {
    case 'dungeon-escape':
      gameTitle = 'Dungeon Escape'
      gameDescription = 'Solve equations to open doors and escape the dungeon!'
      break
    case 'shape-builder':
      gameTitle = 'Shape Builder'
      gameDescription = 'Build shapes and match the outlines to learn geometry!'
      break
    case 'volume-quest':
      gameTitle = 'Volume Quest'
      gameDescription = 'Calculate the volume of 3D objects to progress!'
      break
    case 'pattern-puzzle':
      gameTitle = 'Pattern Puzzle'
      gameDescription = 'Complete the pattern by finding the missing piece!'
      break
  }
  
  app.innerHTML = `
    <header>
      <div class="container">
        <h1 class="logo">MathOrGame</h1>
        <p class="tagline">Learn Math. Play Games.</p>
      </div>
    </header>
    
    <nav>
      <a href="#">Home</a>
      <a href="#/topics">Topics</a>
      <a href="#/about">About</a>
    </nav>
    
    <main class="container">
      <div style="display: flex; justify-content: space-between; align-items: center; margin: 20px 0;">
        <a href="javascript:history.back()" class="btn">Back</a>
        <h2>${gameTitle}</h2>
        <div>Score: <span id="score">0</span></div>
      </div>
      
      <p style="text-align: center; margin-bottom: 20px;">${gameDescription}</p>
      
      <div class="game-container">
        <div id="game-canvas"></div>
      </div>
      
      <div id="game-controls" style="text-align: center; margin: 20px 0;">
        <div id="question-container" style="margin-bottom: 15px; font-size: 1.2rem;"></div>
        <input type="text" id="answer-input" placeholder="Your answer..." style="padding: 8px; margin-right: 10px; width: 150px;">
        <button id="submit-answer" class="btn btn-primary">Submit</button>
      </div>
    </main>
    
    <footer>
      <div class="container">
        <p>&copy; 2023 MathOrGame | <a href="https://ko-fi.com" target="_blank" style="color: white;">Support Us</a></p>
      </div>
    </footer>
  `
  
  // Initialize the game
  initGame(gameId)
}

// Initialize 3D animation for the homepage
function initHomeAnimation() {
  const container = document.getElementById('three-container')
  
  if (!container) return
  
  // Create a scene
  const scene = new THREE.Scene()
  scene.background = new THREE.Color(0xf5f5f5)
  
  // Create a camera
  const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000)
  camera.position.z = 5
  
  // Create a renderer
  const renderer = new THREE.WebGLRenderer({ antialias: true })
  renderer.setSize(container.clientWidth, container.clientHeight)
  container.appendChild(renderer.domElement)
  
  // Create some basic shapes
  const geometry1 = new THREE.BoxGeometry()
  const geometry2 = new THREE.SphereGeometry(0.7, 32, 32)
  const geometry3 = new THREE.ConeGeometry(0.7, 1.2, 32)
  const geometry4 = new THREE.TorusGeometry(0.7, 0.3, 16, 100)
  
  const material1 = new THREE.MeshBasicMaterial({ color: 0x4CAF50 })
  const material2 = new THREE.MeshBasicMaterial({ color: 0xFFC107 })
  const material3 = new THREE.MeshBasicMaterial({ color: 0x2196F3 })
  const material4 = new THREE.MeshBasicMaterial({ color: 0xF44336 })
  
  const cube = new THREE.Mesh(geometry1, material1)
  const sphere = new THREE.Mesh(geometry2, material2)
  const cone = new THREE.Mesh(geometry3, material3)
  const torus = new THREE.Mesh(geometry4, material4)
  
  cube.position.x = -3
  sphere.position.x = -1
  cone.position.x = 1
  torus.position.x = 3
  
  scene.add(cube)
  scene.add(sphere)
  scene.add(cone)
  scene.add(torus)
  
  // Animation
  function animate() {
    requestAnimationFrame(animate)
    
    cube.rotation.x += 0.01
    cube.rotation.y += 0.01
    
    sphere.rotation.y += 0.01
    
    cone.rotation.y += 0.01
    
    torus.rotation.x += 0.01
    torus.rotation.y += 0.01
    
    TWEEN.update()
    
    renderer.render(scene, camera)
  }
  
  // Handle window resize
  window.addEventListener('resize', () => {
    camera.aspect = container.clientWidth / container.clientHeight
    camera.updateProjectionMatrix()
    renderer.setSize(container.clientWidth, container.clientHeight)
  })
  
  animate()
}

// Initialize a game
function initGame(gameId) {
  const gameCanvas = document.getElementById('game-canvas')
  const questionContainer = document.getElementById('question-container')
  const answerInput = document.getElementById('answer-input')
  const submitButton = document.getElementById('submit-answer')
  const scoreElement = document.getElementById('score')
  
  if (!gameCanvas || !questionContainer || !answerInput || !submitButton || !scoreElement) return
  
  let score = 0
  
  // Create a scene
  const scene = new THREE.Scene()
  scene.background = new THREE.Color(0x333333)
  
  // Create a camera
  const camera = new THREE.PerspectiveCamera(75, gameCanvas.clientWidth / gameCanvas.clientHeight, 0.1, 1000)
  camera.position.z = 5
  
  // Create a renderer
  const renderer = new THREE.WebGLRenderer({ antialias: true })
  renderer.setSize(gameCanvas.clientWidth, gameCanvas.clientHeight)
  gameCanvas.appendChild(renderer.domElement)
  
  // Game-specific setup
  switch(gameId) {
    case 'dungeon-escape':
      setupDungeonEscape(scene, camera, renderer, questionContainer, answerInput, submitButton, scoreElement)
      break
    case 'shape-builder':
      // Setup for shape builder game
      break
    case 'volume-quest':
      // Setup for volume quest game
      break
    case 'pattern-puzzle':
      // Setup for pattern puzzle game
      break
  }
  
  // Handle window resize
  window.addEventListener('resize', () => {
    camera.aspect = gameCanvas.clientWidth / gameCanvas.clientHeight
    camera.updateProjectionMatrix()
    renderer.setSize(gameCanvas.clientWidth, gameCanvas.clientHeight)
  })
}

// Setup for Dungeon Escape game
function setupDungeonEscape(scene, camera, renderer, questionContainer, answerInput, submitButton, scoreElement) {
  // Create a dungeon door
  const doorGeometry = new THREE.BoxGeometry(2, 3, 0.2)
  const doorMaterial = new THREE.MeshBasicMaterial({ color: 0x8B4513 })
  const door = new THREE.Mesh(doorGeometry, doorMaterial)
  scene.add(door)
  
  // Create walls
  const wallGeometry = new THREE.BoxGeometry(10, 5, 0.2)
  const wallMaterial = new THREE.MeshBasicMaterial({ color: 0x696969 })
  const wall = new THREE.Mesh(wallGeometry, wallMaterial)
  wall.position.z = -1
  scene.add(wall)
  
  // Create floor
  const floorGeometry = new THREE.PlaneGeometry(10, 5)
  const floorMaterial = new THREE.MeshBasicMaterial({ color: 0x696969, side: THREE.DoubleSide })
  const floor = new THREE.Mesh(floorGeometry, floorMaterial)
  floor.rotation.x = Math.PI / 2
  floor.position.y = -2.5
  scene.add(floor)
  
  // Game variables
  let level = 1
  let score = 0
  let currentQuestion = ''
  let correctAnswer = 0
  let doorOpen = false
  
  // Generate a question
  function generateQuestion() {
    const num1 = Math.floor(Math.random() * (5 * level)) + 1
    const num2 = Math.floor(Math.random() * (5 * level)) + 1
    
    if (Math.random() > 0.5) {
      // Addition
      currentQuestion = `${num1} + ${num2} = ?`
      correctAnswer = num1 + num2
    } else {
      // Subtraction (ensure positive result)
      if (num1 >= num2) {
        currentQuestion = `${num1} - ${num2} = ?`
        correctAnswer = num1 - num2
      } else {
        currentQuestion = `${num2} - ${num1} = ?`
        correctAnswer = num2 - num1
      }
    }
    
    questionContainer.textContent = currentQuestion
  }
  
  // Check answer
  function checkAnswer() {
    const userAnswer = parseInt(answerInput.value)
    
    if (userAnswer === correctAnswer) {
      // Correct answer
      score += 10 * level
      scoreElement.textContent = score
      
      // Open the door
      doorOpen = true
      const openDoorTween = new TWEEN.Tween(door.position)
        .to({ y: 4 }, 1000)
        .easing(TWEEN.Easing.Cubic.Out)
        .start()
      
      // After a delay, move to next level
      setTimeout(() => {
        level++
        doorOpen = false
        
        // Reset door position
        const closeDoorTween = new TWEEN.Tween(door.position)
          .to({ y: 0 }, 500)
          .easing(TWEEN.Easing.Cubic.In)
          .start()
        
        // Generate new question
        setTimeout(generateQuestion, 600)
      }, 2000)
    } else {
      // Wrong answer - shake the door
      const shakeTween = new TWEEN.Tween(door.position)
        .to({ x: 0.2 }, 50)
        .yoyo(true)
        .repeat(5)
        .start()
      
      setTimeout(() => {
        door.position.x = 0
      }, 300)
    }
    
    // Clear input
    answerInput.value = ''
  }
  
  // Event listeners
  submitButton.addEventListener('click', checkAnswer)
  answerInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      checkAnswer()
    }
  })
  
  // Animation
  function animate() {
    requestAnimationFrame(animate)
    
    if (!doorOpen) {
      door.rotation.y = Math.sin(Date.now() * 0.001) * 0.05
    }
    
    TWEEN.update()
    
    renderer.render(scene, camera)
  }
  
  // Start the game
  generateQuestion()
  animate()
}

// Initialize the app
init()
